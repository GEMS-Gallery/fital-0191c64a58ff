type WorkoutProgress = 
 record {
   completedExercises: vec WorkoutExercise;
   date: Time;
 };
type WorkoutPlan = 
 record {
   date: Time;
   exercises: vec WorkoutExercise;
 };
type WorkoutExercise = 
 record {
   completed: bool;
   name: text;
   reps: nat;
   sets: nat;
   userDifficulty: text;
 };
type UserPreferences = 
 record {
   equipment: vec text;
   fitnessLevel: text;
   goals: vec text;
   preferences: vec text;
 };
type Time = int;
type Result_1 = 
 variant {
   err: text;
   ok: WorkoutPlan;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Exercise = 
 record {
   description: text;
   difficulty: nat;
   name: text;
 };
service : {
  generateWorkoutPlan: (UserPreferences) -> (Result_1);
  getCurrentWorkoutPlan: () -> (opt WorkoutPlan) query;
  getExerciseLibrary: () -> (vec Exercise) query;
  getWorkoutProgress: () -> (vec WorkoutProgress) query;
  saveWorkoutProgress: () -> (Result);
  updateExerciseStatus: (text, bool, text) -> (Result);
}
